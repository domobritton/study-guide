* Flash Card Question/Answer 

Q: Define box-sizing.
A: Box sizing is used when you want to include the padding and border into the total height/width.

Q: What is `this` in Javascript?
A: `this` refers to the object it belongs to. In a method this refers to the owner object. In a function it refers to the global object. In an event this refers to the element that received the event.

Q: What is the difference between POST and GET?
A: By design, the POST request method requests that a web server accepts the data enclosed in the body of the request message, most likely for storing it. It is often used when uploading a file or when submitting a completed web form. In contrast, the HTTP GET request method retrieves information from the server.

Q: How do we define a graph mathematically?
A: G = (V, E) where 'V' is a set of vertices or nodes together with a set of 'E' edges, arcs, or lines.

Q: What is the difference between directed, undirected, weighted, and unweighted?
A: Directed graph is a graph that is a set of vertices connected by edges, where the edges have a direction associated with them.

Undirected graph has edges with no orientation.

Q: Give an example of a weighted graph
A:

Q: Give a high level overview of what an objects prototype represents
A: Nearly all objects in JS are instances of Object. A typical object inherits properties (including methods) from Object.prototype.

Q: What are differences between __proto__ and prototype attributes?
A: prototype is not available on the instances themselves (or other objects), but only on the constructor functions. prototype is only available on functions since they are copied from Function and Object, but in anything else it is not. However,__proto__ is available everywhere.

Q: What is an objects default prototype?
A: An object has a prototype property that is empty by default. We can attach properties and methods on this prototype property when we want to implement inheritence.

Q: What happens when we do or don't explicitly set an object's prototype?
A: ???

Q: Name 5 benefits of HTML5
A: 
1) Mutuality for embedding video, audio, charts, animation and more...
2) Cleaner markup by removing divs and replacing with semantic HTML5 elements
3) Elegant forms for reduced need for javascript
4) Offline Application cache for the dev to specify files that the browser should cache, for pages that will reload correctly offline/refresh
5) Geolocation support is directly available to any HTML5-compatible browser

Q: What is localStorage? How might we use it?
A: Allows us to access a Storage object for the Documents origin; stored data is saved across browser sessions. Its useful to store application data in the browser for later usage.

Q: Why are media queries useful?
A: They are useful to implement responsive design; that resizes content dynamically to fit many different devices/browsers

Q: What is mobile-first design?
A: The mobile-first approachis designing for the smallest screen and working your way up. It is one of the best strategies to create responsive or adaptive design

Q: What is a Javascript closure?
A: It is an inner function that has access to the outer enclosing functions variables/scope chain. There are 3 scope chains that it has access to. 1. Its own. 2. The outer functions variables. 3. The global variables.

Q: What are the benefits of a JS closure?
A: It allows you to bind a variable to an execution context and isolate it from being accessed from the outside.

Q: What is data encapsulation?
A: In JS function variables can be hidden from any code outside its definition throught the use of closures.

Q: What happens when you type www.google.com and hit enter?
A: 
1) The browser checks the cache for a DNS record to find the corresponding IP address.
2) If the URL is not in the cache, ISP's DNS server initiates a DNS query to find the IP address of the server that hosts the URL
3) Browser initiates a TCP connection with the server 
4) Browser sends an HTTP request to the server
5) The server handles the request and sends back a response
7) The server sends out an HTTP response
8) The browser displays HTML content for the response

Q: What is the difference between the memory heap and call stack in JS?
A: Variables in JS are stored in both places. A stack is usually a continuous region of memory allocating local contect for each executing function. A heap is a much larger region storing everything allocated dynamically.

Q: What is one problem with programming languages that are fully single-threaded?
A: It will only allow for one task to be done at a time synchronously. Having multiple threads may not speed up execution of code, but can split work up to allow the computer to process several tasks asynchronously.

Q: Is JS a single-threaded language?
A: Though it is technically true that it is a single-threaded language, unlike other scripting languages, JS was created to interact with browsers and utilizes web workers to execute code asynchronously.

Q: In which order do the React Lifecycle methods (including the optional ones) run?
A: Initialization => Mounting => Updating => Unmounting

Q: In which lifecycle methods should you make asynchronous fetches for data?
A: componentDidUpdate, componentDidMount

Q: What is the difference between composition and inheritance in JS functional programming?
A: They are design choices. Inheritance is building based upon what an object is, Composition is building based upon what an object does.

Q: Which React Life Cycle methods can call this.setState()?
A: componentWillMount(), componentDidMount(), componentDidUpdate(), componentWillReceiveProps()

Q: Describe an implementation of Dijkstra's shortest-path algorithm.
A: From starting point on graph choose the shortest path from each next node while also not doubling back on a node already traversed.

Q: Assuming RESTful routes, a GET request to `/magazines/:magazine_id/articles` would do what?
A: Call the index action of the ArticlesController with magazine_id as a key in the params hash

Q: What algorithm is best suited for a social network that suggests friends to a user?
A: A Breadth First Search Graph

Q: What occurs with an <input type='text' required>?
A: 'Required' attribute will check if the text field is empty in client-side when the form is submitted. Submit button can be clicked when the form is submitted.

Q: The React component method, this.setState(), ______
A: Enqueus a request to update the state and re-render the component, which may be delayed and batched with other requests.

Q: To implement Dijkstras shortest path algorithm on unweighted graphs so that is runs in linear time, the data structure to be used is?
A: Queue

Q: The uniform interface constraint ensures that there is a common language buetween servers and clients, that alllow each part to be swapped out or modified without breaking the entire system.
This is acheived through 4 sub-constraints. Which are they?
A: 
1) Identification of resources
2) Caching
3) Layered systems
4) manipulation of resources through representations

Q: What are some features of REST?
A: 
1) Language independent
2) Can be used even if firewalls exist
3) Can be used on top of HTTPS
4) Requests and responses are lightweight

Q: Why would a developer choose to use an IIFE?
A: When they wanted to control what was added to the global namespace

Q: Depth First Search Graph. What is the tightest upper bound on the run time of DFS?
A: O(n2)

Q: Make is a utility that automatically builds executable programs and libraries from source code by reading files called makefiles which speciy how to redive the target program.
What is the algorithm used by Make?
A: Topological Sorting

Q: In an undirected, unweighted connected graph, what algorithm has the fastest time complexity?
A: A BFS search

Q: What is a prototype in JS?
A: An object

Q: When creating an object in JS, is it better practice to define methods on the prototype or within the constructor?
A: Prototype. The methods will be defined in one place and won't be duplicated across instances, saving memory.

Q: TCP/IP is organized into four abstraction layers. What are they from highest to lowest?
A: Application > Transport > Internet > Link

Q: What are key differences between TCP and UDP?
A: 
1) UDP does not have a handshaking protocol, TCP does.
2) UDP has smaller packet sizes (UDP header: 8 bytes, TCP header: 20 bytes), no connection required, and more controll over when data is sent.
3) USP is used by apps to deliver a faster stream of info by doing away with error checking, UDP packets can arrive out of order, or corrupted.
4) TCP has congestion control and error detection (mandatory checksum)

Q: What does it mean when we say JS's event loop is non-blocking?
A: The program can continue executing instructions before an operation in the event loop has finished.

Q: Can you name two programming paradigms important for JavaScript app developers?
A: JavaScript is a multi-paradigm language, supporting imperative/procedural programming along with OOP (Object-Oriented Programming) and functional programming. JavaScript supports OOP with prototypal inheritance.

Q: What are the pros of functional programming?
A: FP Pros: Using the functional paradigm, programmers avoid any shared state or side-effects, which eliminates bugs caused by multiple functions competing for the same resources. With features such as the availability of point-free style (aka tacit programming), functions tend to be radically simplified and easily recomposed for more generally reusable code compared to OOP.
FP also tends to favor declarative and denotational styles, which do not spell out step-by-step instructions for operations, but instead concentrate on whatto do, letting the underlying functions take care of the how. This leaves tremendous latitude for refactoring and performance optimization, even allowing you to replace entire algorithms with more efficient ones with very little code change. (e.g., memoize, or use lazy evaluation in place of eager evaluation.)

Q: What are the cons of Functional Programming?
A: Over exploitation of FP features such as point-free style and large compositions can potentially reduce readability because the resulting code is often more abstractly specified, more terse, and less concrete.
More people are familiar with OO and imperative programming than functional programming, so even common idioms in functional programming can be confusing to new team members.

Q: What are the pros of OOP?
A: It’s easy to understand the basic concept of objects and easy to interpret the meaning of method calls. OOP tends to use an imperative style rather than a declarative style, which reads like a straight-forward set of instructions for the computer to follow.

Q: What are the cons of OOP?
A: OOP Typically depends on shared state. Objects and behaviors are typically tacked together on the same entity, which may be accessed at random by any number of functions with non-deterministic order, which may lead to undesirable behavior such as race conditions.

Q: What are two-way data binding and one-way data flow, and how are they different?
A: Two way data binding means that UI fields are bound to model data dynamically such that when a UI field changes, the model data changes with it and vice-versa.
One way data flow means that the model is the single source of truth. Changes in the UI trigger messages that signal user intent to the model (or “store” in React). Only the model has the access to change the app’s state. The effect is that data always flows in a single direction, which makes it easier to understand.

Q: What does “favor object composition over class inheritance” mean?
A: This is a quote from “Design Patterns: Elements of Reusable Object-Oriented Software”. It means that code reuse should be achieved by assembling smaller units of functionality into new objects instead of inheriting from classes and creating object taxonomies.
In other words, use can-do, has-a, or uses-a relationships instead of is-arelationships.

Q: What is a microservice architecture?
A: A microservice architecture means that your app is made up of lots of smaller, independent applications capable of running in their own memory space and scaling independently from each other across potentially many separate machines.

Q: What is a monolithic architecture?
A: A monolithic architecture means that your app is written as one cohesive unit of code whose components are designed to work together, sharing the same memory space and resources.

Q: What is asynchronous programming, and why is it important in JavaScript?
A: Synchronous programming means that, barring conditionals and function calls, code is executed sequentially from top-to-bottom, blocking on long-running tasks such as network requests and disk I/O.
Asynchronous programming means that the engine runs in an event loop. When a blocking operation is needed, the request is started, and the code keeps running without blocking for the result. When the response is ready, an interrupt is fired, which causes an event handler to be run, where the control flow continues. In this way, a single program thread can handle many concurrent operations.
User interfaces are asynchronous by nature, and spend most of their time waiting for user input to interrupt the event loop and trigger event handlers.
Node is asynchronous by default, meaning that the server works in much the same way, waiting in a loop for a network request, and accepting more incoming requests while the first one is being handled.
This is important in JavaScript, because it is a very natural fit for user interface code, and very beneficial to performance on the server.

